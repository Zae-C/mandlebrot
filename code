import pygame
import math
import cmath
import threading

pygame.init()  
pygame.display.set_caption("mandelbrot")  # sets the window title
screen = pygame.display.set_mode((800, 800))  # creates game screen
screen.fill((0,0,0))

#mandelbrot function definition------------------------ 
def mandelbrot(c):
    z = complex(0,0);
    count = 0;
    while abs(z) < 2 and count < 80: 
        z = z * z + c;
        count+=.1;
    return count;
#end mandelbrot function--------------------------------

#-------------------------------------------------------
#in C++, this would be the start of main----------------
def thread():
    t = 2 #lower bound for real axis
    while t>-2: #upper bound for real (horizontal) axis
        t-=.005 #make this number SMALLER to increase picture resolution
        
        m = 2 #lower bound for imaginary axis
        while m>-2: #upper bound for imaginary (vertical) axis
            m-=.005 #make this number SMALLER to increase picture resolution
            
            c = complex(t, m) #create a complex number from iterators
            num = mandelbrot(c); #call the function

            #these if statements are just to differentiate the colors more, not needed if you want black & white image
            if num < 20:
                screen.set_at((int(m * 200 + 400), int(t * 200 + 400)), (num*8, num*5, num*2)) #handles background shading stuff
                  
            elif num<40:
               screen.set_at((int(t * 200 + 400), int(m * 200 + 400)), (num*3, num/12, num*2))
            elif num is 80:
               screen.set_at((int(t * 200 + 400), int(m * 200 + 400)), (12,25,215)) #handles the inside stuff. Count variable at the top can actually change the color here
            else:
               screen.set_at((int(m * 200 + 400), int(t * 200 + 400)), (num*3, num/6, num*3))

            pygame.display.flip()#this actually puts the pixel on the screen

t1 = threading.Thread(target = thread)
t2 = threading.Thread(target = thread)
t3 = threading.Thread(target = thread)
t4 = threading.Thread(target = thread)
t5 = threading.Thread(target = thread)
t1.start()
t2.start()
t3.start()
t4.start()
#t5.start()
pygame.time.wait(10000)#pause to see the picture
#pygame.quit()#quit pygame

